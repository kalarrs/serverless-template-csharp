service: mongo

plugins:
 - "@kalarrs/serverless-project-utils"
 - "@kalarrs/serverless-shared-api-gateway"

provider:
  name: aws
  runtime: dotnetcore2.0
  profile: ${file(../serverless.yml):provider.profile}
  region: ${file(../serverless.yml):provider.region}
  stage: ${file(../serverless.yml):provider.stage}
  apiGatewayRestApiName: ${file(../serverless.yml):provider.apiGatewayRestApiName}
  
  environment:
    MONGODB_URI: ${env:MONGODB_URI, file(../serverless.yml):provider.environment.MONGODB_URI}

package:
  artifact: src/bin/release/netcoreapp2.0/deploy-package.zip
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # list
  getUserGroups:
    handler: CsharpHandlers::changes.Handler::GetUserGroups
    events:
      - http:
          method: get
          path: user-groups
          cors: true

  # create
  postChanges:
    handler: CsharpHandlers::changes.Handler::PostUserGroups
    events:
      - http:
          method: post
          path: user-groups
          cors: true
          
  # referential integrity
  
  referentialIntegrity:
    handler: CsharpHandlers::changes.Handler::ReferentialIntegrityUserGroups
    timeout: 60
    events:
      - schedule: rate(1 day)

  test:
    handler: CsharpHandlers::changes.Handler::Schedule
    timeout: 60
    events:
      - schedule:
          rate: cron(0 10 * * ? *)
          enabled: false
          input:
            key1: value1
            key2: value2
            stageParams:
              stage: dev
              
#
#  # put
#  putChanges:
#    handler: CsharpHandlers::changes.Handler::PutChange
#    events:
#      - http:
#          method: put
#          path: changes/{changeId}
#          cors: true
#
#  # delete
#  deleteChanges:
#    handler: CsharpHandlers::changes.Handler::DeleteChange
#    events:
#      - http:
#          method: delete
#          path: changes/{changeId}
#          cors: true

custom:
  user: ${file(../serverless.yml):custom.user}
  localDevPort: 5005
